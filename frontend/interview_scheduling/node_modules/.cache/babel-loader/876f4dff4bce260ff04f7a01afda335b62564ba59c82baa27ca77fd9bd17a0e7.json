{"ast":null,"code":"var _jsxFileName = \"/Users/apple/ml-setup/ML/interview scheduling app/frontend/interview_scheduling/src/RescheduleInterview.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RescheduleInterview = ({\n  handleNotification\n}) => {\n  _s();\n  const [interviews, setInterviews] = useState([]);\n  const [selectedInterview, setSelectedInterview] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchInterviews = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/interviews\");\n        const data = await response.json();\n        setInterviews(data);\n      } catch (error) {\n        handleNotification(\"Failed to load scheduled interviews.\");\n      }\n    };\n    fetchInterviews();\n  }, [handleNotification]);\n  const handleReschedule = async interview => {\n    setLoading(true);\n    setSelectedInterview(interview);\n    try {\n      const response = await fetch(\"http://localhost:8000/slots\");\n      const slots = await response.json();\n      setSelectedInterview({\n        ...interview,\n        availableSlots: slots\n      });\n    } catch (error) {\n      handleNotification(\"Failed to load available slots.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const confirmReschedule = async newSlot => {\n    setLoading(true);\n    const rescheduleDetails = {\n      interviewId: selectedInterview.id,\n      newSlotId: newSlot.id\n    };\n    try {\n      const response = await fetch(\"http://localhost:8000/reschedule\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(rescheduleDetails)\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to reschedule the interview.\");\n      }\n      const data = await response.json();\n      handleNotification(`Interview rescheduled to ${data.newDate} at ${data.newTime}.`);\n      setInterviews(interviews.map(interview => interview.id === selectedInterview.id ? {\n        ...interview,\n        ...data\n      } : interview));\n      setSelectedInterview(null);\n    } catch (error) {\n      handleNotification(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reschedule-interview\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reschedule Interview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }, this), interviews.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No interviews scheduled. Please schedule an interview first.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: interviews.map(interview => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [interview.name, \" - \", interview.date, \" at \", interview.time, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleReschedule(interview),\n          children: \"Reschedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this)]\n      }, interview.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), selectedInterview && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"available-slots\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Available Slots For Rescheduling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), selectedInterview.availableSlots && selectedInterview.availableSlots.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedInterview.availableSlots.map(slot => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [slot.date, \" at \", slot.time, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => confirmReschedule(slot),\n            children: \"Confirm Reschedule\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 37\n          }, this)]\n        }, slot.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No slots available for rescheduling.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedInterview(null),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(RescheduleInterview, \"NNbwsNBxR3x0d3o7GEc1Nj2+1cU=\");\n_c = RescheduleInterview;\nexport default RescheduleInterview;\nvar _c;\n$RefreshReg$(_c, \"RescheduleInterview\");","map":{"version":3,"names":["React","useEffect","useState","Link","jsxDEV","_jsxDEV","RescheduleInterview","handleNotification","_s","interviews","setInterviews","selectedInterview","setSelectedInterview","loading","setLoading","fetchInterviews","response","fetch","data","json","error","handleReschedule","interview","slots","availableSlots","confirmReschedule","newSlot","rescheduleDetails","interviewId","id","newSlotId","method","headers","body","JSON","stringify","ok","Error","newDate","newTime","map","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","name","date","time","onClick","slot","_c","$RefreshReg$"],"sources":["/Users/apple/ml-setup/ML/interview scheduling app/frontend/interview_scheduling/src/RescheduleInterview.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Link} from 'react-router-dom';\n\nconst RescheduleInterview = ({handleNotification}) => {\n    const [interviews, setInterviews] = useState([]);\n    const [selectedInterview, setSelectedInterview] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(()=> {\n        const fetchInterviews = async()=> {\n            try{\n                const response = await fetch(\"http://localhost:8000/interviews\");\n                const data = await response.json();\n                setInterviews(data);\n            }   catch(error){\n                handleNotification(\"Failed to load scheduled interviews.\");\n            }\n        };\n        fetchInterviews();\n    }, [handleNotification]);\n\n    const handleReschedule = async (interview)=> {\n        setLoading(true);\n        setSelectedInterview(interview);\n        try{\n            const response = await fetch(\"http://localhost:8000/slots\");\n            const slots = await response.json();\n            setSelectedInterview({...interview, availableSlots: slots});\n        }   catch(error){\n            handleNotification(\"Failed to load available slots.\");\n        }   finally{\n            setLoading(false);\n        }\n    };\n\n    const confirmReschedule = async (newSlot)=> {\n        setLoading(true);\n        const rescheduleDetails = {\n            interviewId : selectedInterview.id,\n            newSlotId : newSlot.id,\n        };\n        try{\n            const response = await fetch(\"http://localhost:8000/reschedule\",{\n                method : 'POST',\n                headers : {\n                    'Content-Type' : 'application/json',\n                },\n                body: JSON.stringify(rescheduleDetails),\n            });\n\n            if (!response.ok){\n                throw new Error(\"Failed to reschedule the interview.\");\n            }\n\n            const data = await response.json();\n            handleNotification(`Interview rescheduled to ${data.newDate} at ${data.newTime}.`);\n            setInterviews(interviews.map(interview=> interview.id === selectedInterview.id? {...interview, ...data}: interview));\n            setSelectedInterview(null);\n        }   catch(error){\n            handleNotification(error.message);\n        }   finally{\n            setLoading(false);\n        }\n    };\n\n    return(\n        <div className=\"reschedule-interview\">\n            <h2>Reschedule Interview</h2>\n            {loading && <p>Loading...</p>}\n            {interviews.length === 0? (\n                <p>\n                    No interviews scheduled. Please schedule an interview first.\n                </p>\n            ):(\n                <ul>\n                    {interviews.map((interview)=> (\n                        <li key={interview.id}>\n                            {interview.name} - {interview.date} at {interview.time}\n                            <button onClick={()=> handleReschedule(interview)}>Reschedule</button>\n                        </li>\n                    ))}\n                </ul>\n            )}\n            {selectedInterview && (\n                <div className=\"available-slots\">\n                    <h3>Available Slots For Rescheduling</h3>\n                    {selectedInterview.availableSlots && selectedInterview.availableSlots.length > 0 ? (\n                        <ul>\n                            {selectedInterview.availableSlots.map((slot)=> (\n                                <li key={slot.id}>\n                                    {slot.date} at {slot.time}\n                                    <button onClick={()=> confirmReschedule(slot)}>Confirm Reschedule</button>\n                                </li>\n                            ))}\n                        </ul>\n                    ):(\n                        <p>No slots available for rescheduling.</p>\n                    )}\n                    <button onClick={()=> setSelectedInterview(null)}>Cancel</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default RescheduleInterview;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}